<!DOCTYPE html>
<html lang="fr">
<head>
  <meta charset="utf-8"/>
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Tableau des Scores - Loup-Garou</title>
  <link rel="stylesheet" href="style.css">
  <style>
    :root {
      --primary-color: #e43f5a;
      --secondary-color: #1f8a70;
      --background-dark: #1a1a2e;
      --background-light: #162447;
      --border-color: #1f4068;
      --text-light: #e0e0e0;
      --text-dark: #333;
      --warning-color: #f7b731;
    }

    /* Override body styles for this specific layout */
    body {
        display: block;
        background-color: var(--background-dark);
    }

    header {
        background-color: var(--background-light);
        padding: 15px 20px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        border-bottom: 1px solid var(--border-color);
    }
    header h1 {
        margin: 0;
        font-size: 1.8rem;
    }
    header .btn {
        margin-left: 15px;
        padding: 8px 15px;
        font-size: 0.9rem;
    }

    .main-container {
        display: flex;
        height: calc(100vh - 80px); /* Full height minus header */
    }

    aside {
        width: 380px;
        min-width: 380px;
        background: var(--background-light);
        border-right: 1px solid var(--border-color);
        padding: 20px;
        overflow-y: auto;
    }

    main {
        flex: 1;
        padding: 20px;
        overflow-y: auto;
        background: var(--background-dark);
    }

    .group-list { list-style: none; padding: 0; }
    .group-item {
        background: var(--background-dark);
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 15px;
        border: 1px solid var(--border-color);
        border-left-width: 5px;
        transition: transform 0.2s, box-shadow 0.2s;
    }
    .group-item:hover {
        transform: translateY(-3px);
        box-shadow: 0 0 12px rgba(228, 63, 90, 0.4);
    }
    .group-item.in-progress { border-left-color: var(--warning-color); }
    .group-item.completed { border-left-color: var(--secondary-color); }
    .group-item.error { border-left-color: var(--primary-color); }

    .group-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 10px; }
    .group-header span { font-weight: bold; font-size: 1.1rem; }
    .group-header small { font-size: 0.8rem; opacity: 0.7; margin-left: 5px; }

    .status-badge {
        padding: 4px 10px; border-radius: 15px; font-size: 0.75rem; font-weight: bold;
    }
    .status-in-progress { background-color: var(--warning-color); color: var(--text-dark); }
    .status-completed { background-color: var(--secondary-color); color: var(--text-light); }

    .group-controls, .group-actions { display: flex; gap: 10px; margin-top: 10px; }
    .group-actions .btn { padding: 5px 10px; font-size: 0.8rem; }
    .btn-danger { background-color: #b8324f; }
    .btn-danger:hover { background-color: #a12a44; }

    table {
        width:100%; border-collapse: collapse; background-color: var(--background-light);
        border-radius: 8px; overflow: hidden;
    }
    th, td { padding:15px; border-bottom:1px solid var(--border-color); text-align:left; }
    th { background: var(--primary-color); color: var(--text-light); text-transform: uppercase; font-size: 0.9rem; }
    tbody tr:hover { background-color: #2a2a5e; }
    .btn-detail { background: none; border: none; color: var(--secondary-color); cursor: pointer; font-weight: bold; }
    .details-content { display: none; margin-top:10px; background:var(--background-dark); padding:15px; border-radius:8px; }
    .details-content.active { display:block; }
    .details-content ul { padding-left: 20px; }

    /* Modal Styles */
    .modal {
        position: fixed; top:0; left:0; width:100%; height:100%;
        background: rgba(0,0,0,0.7); display:flex; justify-content:center;
        align-items:center; opacity:0; pointer-events:none; transition: opacity 0.3s; z-index:1000;
    }
    .modal.active { opacity:1; pointer-events:all; }
    .modal-content {
        background: var(--background-light); padding: 30px; border-radius: 12px;
        width: 90%; max-width: 550px; border: 1px solid var(--border-color);
        box-shadow: 0 0 20px rgba(0,0,0,0.5); max-height:90vh; overflow-y:auto;
    }
    .modal-header { display:flex; justify-content:space-between; align-items:center; margin-bottom:20px; border-bottom: 1px solid var(--border-color); padding-bottom: 15px;}
    .modal-title { font-size:1.5rem; color:var(--primary-color); margin: 0; }
    .close-btn { background:none; border:none; font-size:2rem; cursor:pointer; color:var(--text-light); line-height: 1; }

    fieldset { border:1px solid var(--border-color); border-radius:8px; padding:15px; margin-bottom: 15px; }
    legend { padding:0 10px; font-weight:bold; color:var(--primary-color); }
    .radio-group { display: flex; gap: 20px; margin-top: 10px; }
    .radio-option { display: flex; align-items: center; gap: 5px; }

    .choice-buttons { display:flex; flex-wrap:wrap; gap:8px; margin-top: 10px; }
    .choice-buttons button {
      padding:8px 12px; border:1px solid var(--border-color); border-radius:8px;
      background:var(--background-dark); cursor:pointer; color: var(--text-light);
    }
    .choice-buttons button.active {
      background: var(--primary-color); color: var(--text-light); border-color:var(--primary-color);
    }
    .form-actions { display:flex; justify-content:flex-end; gap:10px; margin-top: 20px; }
    .form-actions .btn.close-btn { background-color: #555; }

    .enigma-notification {
      margin-top: 10px; padding: 8px; background-color: var(--warning-color);
      color: var(--text-dark); border-radius: 8px; cursor: pointer; font-weight: bold;
    }
    @keyframes blink { 50% { opacity: 0.6; } }
    .blinking { animation: blink 1s infinite; }
  </style>
  <script src="network.js"></script>
</head>
<body>
  <header>
    <h1>Tableau des Scores
      <button id="loadFromGitHubBtn" class="btn">📥 Charger</button>
      <button id="saveToGitHubBtn" class="btn">📤 Sauvegarder</button>
      <a href="index.html" class="btn" style="background-color: #1f8a70;">Portail</a>
    </h1>
  </header>
  <div class="main-container">
    <aside>
      <button id="addGroupBtn" class="btn" style="width: 100%;">Ajouter un groupe</button>
      <ul id="groupList" class="group-list"></ul>
    </aside>
    <main>
      <table id="scoreTable">
        <thead>
          <tr><th>Groupe</th><th>Note</th><th>Détails</th></tr>
        </thead>
        <tbody></tbody>
      </table>
    </main>
  </div>

  <!-- Modals -->
  <div class="modal" id="addGroupModal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title">Nouveau Groupe</h2>
        <button class="close-btn">×</button>
      </div>
      <form id="addGroupForm">
        <label for="newGroupName">Nom du groupe</label>
        <input id="newGroupName" type="text" placeholder="Ex: Les Loups Sympas" required/>
        <div class="form-actions">
          <button type="button" class="btn close-btn">Annuler</button>
          <button type="submit" class="btn">Créer</button>
        </div>
      </form>
    </div>
  </div>

  <div class="modal" id="scoreModal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title">Calculer le Score</h2>
        <button class="close-btn">×</button>
      </div>
      <form id="scoreForm">
        <input id="groupName" type="hidden"/>
        <fieldset>
          <legend>Pouvoirs</legend>
          <label><strong>Capitaine utilisé ?</strong> (-5 pts)</label>
          <div class="radio-group">
            <label><input type="radio" name="capitaineUsed" value="false" checked> Non</label>
            <label><input type="radio" name="capitaineUsed" value="true"> Oui</label>
          </div>
          <br>
          <label><strong>Réflexion rapide ?</strong> (+10 pts)</label>
          <div class="radio-group">
            <label><input type="radio" name="reflexionEarly" value="false" checked> Non</label>
            <label><input type="radio" name="reflexionEarly" value="true"> Oui</label>
          </div>
        </fieldset>
        <fieldset>
          <legend>Cartes Voyante</legend>
          <label>Cartes utilisées (-1 pt/carte)</label>
          <div id="voyante-buttons" class="choice-buttons">
            <button type="button" data-voyante="0">0</button> <button type="button" data-voyante="1">1</button> <button type="button" data-voyante="2">2</button> <button type="button" data-voyante="3">3</button> <button type="button" data-voyante="4">4</button> <button type="button" data-voyante="5">5</button> <button type="button" data-voyante="6">6</button> <button type="button" data-voyante="7">7</button> <button type="button" data-voyante="8">8</button>
          </div>
          <input id="voyanteCards" type="hidden" value="0"/>
        </fieldset>
        <fieldset>
          <legend>Salle du Trésor</legend>
          <label>Temps d'exploration (-1 pt/30s)</label>
          <div id="time-buttons" class="choice-buttons">
             <button type="button" data-time="30">30s</button> <button type="button" data-time="60">1m</button> <button type="button" data-time="90">1m30</button> <button type="button" data-time="120">2m</button> <button type="button" data-time="150">2m30</button> <button type="button" data-time="180">3m</button> <button type="button" data-time="210">3m30</button> <button type="button" data-time="240">4m</button> <button type="button" data-time="270">4m30</button> <button type="button" data-time="300">5m</button> <button type="button" data-time="330">5m30</button> <button type="button" data-time="360">6m</button>
          </div>
          <input id="treasureTime" type="hidden" value="0"/>
        </fieldset>
        <fieldset>
          <legend>Rituel</legend>
          <label><strong>Erreurs au rituel</strong></label>
          <div id="ritual-buttons" class="choice-buttons" style="flex-direction: column; align-items: stretch;">
            <button type="button" data-ritual="0">Succès parfait</button>
            <button type="button" data-ritual="1">Une erreur (Voleur déclenché)</button>
            <button type="button" data-ritual="2">Échec</button>
          </div>
          <input id="ritualErrors" type="hidden" value="0"/>
          <br>
          <label><strong>Si Voleur déclenché, a-t-il réussi ?</strong></label>
          <div class="radio-group">
            <label><input type="radio" name="voleurCorrected" value="false" checked> Non</label>
            <label><input type="radio" name="voleurCorrected" value="true"> Oui</label>
          </div>
        </fieldset>
        <div class="form-actions">
          <button type="button" class="btn close-btn">Annuler</button>
          <button type="submit" class="btn">Enregistrer</button>
        </div>
      </form>
    </div>
  </div>

  <div class="modal" id="confirmDeleteModal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title">Confirmer Suppression</h2>
        <button class="close-btn">×</button>
      </div>
      <p>Êtes-vous sûr de vouloir supprimer ce groupe ? Cette action est irréversible.</p>
      <div class="form-actions">
        <button type="button" class="btn close-btn">Annuler</button>
        <button type="button" id="confirmDeleteBtn" class="btn btn-danger">Supprimer</button>
      </div>
    </div>
  </div>

  <div class="modal" id="enigmaModal">
    <div class="modal-content">
      <div class="modal-header">
        <h2 class="modal-title" id="enigmaModalTitle">Réponse à l'énigme</h2>
        <button class="close-btn">×</button>
      </div>
      <div id="enigmaAnswerContent"></div>
      <div class="form-actions">
        <button type="button" class="btn close-btn">Fermer</button>
      </div>
    </div>
  </div>

  <script>
    // NOTE: The original JavaScript logic is preserved here without changes to functionality.
    // Only the parts interacting with the DOM might be affected if class names were changed,
    // but a review shows that IDs are primarily used, so the script should remain compatible.

    async function saveToGitHub(data) {
      const res = await fetch('/.netlify/functions/saveScores', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data)
      });
      if (!res.ok) {
        const errorText = await res.text();
        console.error('Erreur sauvegarde GitHub :', errorText);
        throw new Error(`La sauvegarde sur GitHub a échoué: ${errorText}`);
      }
      console.log('🦊 Sauvegarde GitHub OK');
    }

    let isSaving = false;

    async function loadFromGitHub() {
      if (isSaving) {
        console.log('🔄 Action de sauvegarde en cours, chargement reporté.');
        return;
      }
      try {
        const repoInfoRes = await fetch('/.netlify/functions/getRepoInfo');
        if (!repoInfoRes.ok) throw new Error('Impossible de charger la configuration du dépôt.');
        const { owner, repo } = await repoInfoRes.json();

        const apiUrl = `https://api.github.com/repos/${owner}/${repo}/contents/scores-loup-garou.json`;
        const response = await fetch(`${apiUrl}?ref=main`, {
          headers: { 'Accept': 'application/vnd.github.v3.raw' },
          cache: 'no-store'
        });
        if (!response.ok) throw new Error('Échec du chargement via API GitHub');
        const data = await response.json();

        Object.keys(groups).forEach(k => delete groups[k]);
        Object.assign(groups, data);

        renderGroupList();
        renderScoreTable();
      } catch (err) {
        console.error('⚠️ Erreur API GitHub :', err);
        alert('❌ Erreur lors du chargement via l’API GitHub: ' + err.message);
      }
    }

    const groups = {};
    document.addEventListener('DOMContentLoaded', loadFromGitHub);

    const BASE_SCORE = 50, MAX_BASE = 50;

    function generatePassword() {
      let password;
      const existingPasswords = Object.values(groups).map(g => g.password);
      do {
        password = Math.floor(1000 + Math.random() * 9000).toString();
      } while (existingPasswords.includes(password));
      return password;
    }

    async function addGroup(name) {
      if (!name || groups[name]) {
        alert(name ? 'Ce nom de groupe existe déjà.' : 'Veuillez entrer un nom pour le groupe.');
        return false;
      }
      groups[name] = {
        status: 'En cours', score: null, data: null, details: null,
        password: generatePassword()
      };
      renderGroupList();
      isSaving = true;
      try {
        await saveToGitHub(groups);
        return true;
      } catch (err) {
        alert(`❌ Échec de la création du groupe: ${err.message}`);
        delete groups[name];
        renderGroupList();
        return false;
      } finally {
        isSaving = false;
      }
    }
    async function deleteGroup(name) {
      if (!groups[name]) return;
      const backup = { ...groups[name] };
      delete groups[name];
      renderGroupList();
      renderScoreTable();
      isSaving = true;
      try {
        await saveToGitHub(groups);
      } catch (err) {
        alert(`❌ Échec de la suppression du groupe: ${err.message}`);
        groups[name] = backup;
        renderGroupList();
        renderScoreTable();
      } finally {
        isSaving = false;
      }
    }
    async function updateGroupStatus(name, newStatus) {
      if (!groups[name] || groups[name].status === newStatus) return;
      const oldStatus = groups[name].status;
      groups[name].status = newStatus;
      renderGroupList();
      if (newStatus === 'Terminé') {
        isSaving = true;
        try {
          await saveToGitHub(groups);
        } catch (err) {
          alert(`❌ Échec de la mise à jour du statut: ${err.message}`);
          groups[name].status = oldStatus;
          renderGroupList();
        } finally {
          isSaving = false;
        }
      }
    }
    async function updateGroupScore(name, data) {
      if (!groups[name] || isSaving) return;
      isSaving = true;
      const oldGroupData = { ...groups[name] };
      const { base, details } = calcBase(data);
      groups[name].score = Math.min(100, base * 2);
      groups[name].data = data;
      groups[name].details = details;
      renderGroupList();
      renderScoreTable();
      try {
        await saveToGitHub(groups);
      } catch (err) {
        alert(`❌ Échec de la sauvegarde du score: ${err.message}`);
        groups[name] = oldGroupData;
        renderGroupList();
        renderScoreTable();
      } finally {
        isSaving = false;
      }
    }

    function renderGroupList() {
      const ul = document.getElementById('groupList');
      ul.innerHTML = '';
      Object.keys(groups).forEach(name => {
        const g = groups[name];
        const li = document.createElement('li');
        const classes = ['group-item',
          g.status==='En cours'?'in-progress':
          g.status==='Terminé'?'completed':'error'
        ];
        li.className = classes.join(' ');
        let enigmaNotificationsHtml = '';
        if (g.data && g.data.enigmaAnswers) {
          for (const spiritId in g.data.enigmaAnswers) {
            const isViewed = g.data.enigmaViewed && g.data.enigmaViewed[spiritId];
            const blinkingClass = isViewed ? '' : ' blinking';
            const replayCount = (g.data.replays && g.data.replays[spiritId]) || 0;
            const replayText = replayCount > 0 ? ` (${replayCount} écoutes)` : '';
            enigmaNotificationsHtml += `<div class="enigma-notification${blinkingClass}" data-group-name="${name}" data-spirit-id="${spiritId}">
              ! Réponse Esprit ${spiritId} reçue !${replayText}
            </div>`;
          }
        }
        li.innerHTML = `
          <div class="group-header">
            <span>${name} <small>(${g.password})</small></span>
            <span class="status-badge ${g.status === 'En cours' ? 'status-in-progress' : 'status-completed'}">${g.status}</span>
          </div>
          <div class="group-controls">
            <select data-group="${name}" style="flex-grow:1;">
              <option value="En cours"${g.status==='En cours'?' selected':''}>En cours</option>
              <option value="Terminé"${g.status==='Terminé'?' selected':''}>Terminé</option>
            </select>
            <button class="btn" data-group="${name}" ${g.status!=='Terminé'?'style="display:none;"':''}>Résultat</button>
          </div>
          <div class="group-actions">
            <a href="groupe.html?name=${encodeURIComponent(name)}&from=scores" target="_blank" class="btn">Page Groupe</a>
            <button class="btn btn-danger" data-group="${name}" data-action="delete">Supprimer</button>
          </div>
          ${enigmaNotificationsHtml}
        `;
        ul.appendChild(li);
      });
      document.querySelectorAll('.group-item select').forEach(sel => sel.addEventListener('change', e => updateGroupStatus(e.target.dataset.group, e.target.value)));
      document.querySelectorAll('.group-item button:not(.btn-danger)').forEach(btn=> btn.addEventListener('click', e => openScoreModal(e.target.dataset.group)));
      document.querySelectorAll('.group-item .btn-danger').forEach(btn=> btn.addEventListener('click', e => { window.groupToDelete = e.target.dataset.group; openModal(confirmDeleteModal); }));
      document.querySelectorAll('.enigma-notification').forEach(notification => notification.addEventListener('click', e => viewEnigma(e.target.dataset.groupName, e.target.dataset.spiritId, e.target)));
    }

    async function viewEnigma(groupName, spiritId, targetElement) {
        const group = groups[groupName];
        const answer = group?.data?.enigmaAnswers?.[spiritId];
        if (answer) {
            if (!group.data.enigmaViewed || !group.data.enigmaViewed[spiritId]) {
                if (!group.data.enigmaViewed) group.data.enigmaViewed = {};
                group.data.enigmaViewed[spiritId] = true;
                targetElement.classList.remove('blinking');
                isSaving = true;
                try { await saveToGitHub(groups); }
                catch (err) { console.error("Failed to save 'enigma viewed' state:", err); }
                finally { isSaving = false; }
            }
            document.getElementById('enigmaModalTitle').textContent = `Réponse de ${groupName} - Esprit ${spiritId}`;
            document.getElementById('enigmaAnswerContent').innerHTML = `<p><strong>Réponse:</strong></p><p>${answer}</p>`;
            openModal(enigmaModal);
        }
    }

    function openScoreModal(groupName) {
        const groupData = groups[groupName]?.data;
        const form = document.getElementById('scoreForm');
        form.reset();
        document.querySelectorAll('.choice-buttons button').forEach(b => b.classList.remove('active'));

        document.getElementById('groupName').value = groupName;

        if (groupData) {
            document.querySelector(`input[name="capitaineUsed"][value="${groupData.capitaineUsed || false}"]`).checked = true;
            document.querySelector(`input[name="reflexionEarly"][value="${groupData.reflexionEarly || false}"]`).checked = true;
            document.querySelector(`input[name="voleurCorrected"][value="${groupData.voleurCorrected || false}"]`).checked = true;

            const voyanteCards = groupData.voyanteCards || 0;
            document.getElementById('voyanteCards').value = voyanteCards;
            document.querySelector(`#voyante-buttons button[data-voyante="${voyanteCards}"]`)?.classList.add('active');

            const treasureTime = groupData.treasureTime || 0;
            document.getElementById('treasureTime').value = treasureTime;
            document.querySelector(`#time-buttons button[data-time="${treasureTime}"]`)?.classList.add('active');

            const ritualErrors = groupData.ritualErrors || 0;
            document.getElementById('ritualErrors').value = ritualErrors;
            document.querySelector(`#ritual-buttons button[data-ritual="${ritualErrors}"]`)?.classList.add('active');
        }
        openModal(scoreModal);
    }

    function renderScoreTable() {
      const tbody = document.querySelector('#scoreTable tbody');
      tbody.innerHTML = '';
      Object.entries(groups).filter(([,g])=>g.score!==null).sort((a,b)=>b[1].score-a[1].score).forEach(([name,g])=>{
          const tr = document.createElement('tr');
          tr.innerHTML = `
            <td>${name}</td>
            <td><strong>${g.score}/100</strong></td>
            <td>
              ${g.details?`<button class="btn-detail" data-name="${name}">Détails</button><div class="details-content"><ul>${g.details.map(d=>`<li>${d}</li>`).join('')}</ul></div>`:''}
            </td>
          `;
          tbody.appendChild(tr);
        });
      document.querySelectorAll('.btn-detail').forEach(btn=>
        btn.addEventListener('click', e => {
          const div = e.target.nextElementSibling;
          div.classList.toggle('active');
          e.target.textContent = div.classList.contains('active') ? 'Masquer' : 'Détails';
        })
      );
    }

    function calcBase(data) {
      let s = BASE_SCORE, details = [];
      details.push(`Score de base: ${s} pts`);
      s+=2; details.push(`Bonus auto: +2 (Total: ${s})`);
      if(data.capitaineUsed){s-=5; details.push(`Capitaine: -5 (Total: ${s})`);}
      if(data.voyanteCards>0){s-=data.voyanteCards; details.push(`Voyante x${data.voyanteCards}: -${data.voyanteCards} (Total: ${s})`);}
      if(data.reflexionEarly){s+=10; details.push(`Réflexion: +10 (Total: ${s})`);}
      const pen = Math.floor(data.treasureTime/30);
      if(pen>0){s-=pen; details.push(`Temps ${data.treasureTime}s: -${pen} (Total: ${s})`);}
      if(data.ritualErrors>0){
        const p = data.ritualErrors===1?(data.voleurCorrected?10:20):20;
        s-=p; details.push(`Erreur rituel: -${p} (Total: ${s})`);
      }
      if (data.replays) {
        const totalReplays = Object.values(data.replays).reduce((sum, count) => sum + count, 0);
        if (totalReplays > 0) {
          s -= totalReplays;
          details.push(`Relectures audio x${totalReplays}: -${totalReplays} (Total: ${s})`);
        }
      }
      const finalS = Math.max(0,Math.min(MAX_BASE,s));
      if(finalS!==s) details.push(`Ajusté: ${finalS}`);
      details.push(`Score final: ${finalS*2}/100`);
      if (data.enigmaAnswers) {
          details.push('--- Réponses Énigmes ---');
          for (const [spiritId, answer] of Object.entries(data.enigmaAnswers)) {
              details.push(`Esprit ${spiritId}: ${answer}`);
          }
      }
      return { base: finalS, details };
    }

    const addGroupModal = document.getElementById('addGroupModal');
    const scoreModal = document.getElementById('scoreModal');
    const confirmDeleteModal = document.getElementById('confirmDeleteModal');
    const enigmaModal = document.getElementById('enigmaModal');
    
    function openModal(m){m.classList.add('active');}
    function closeModal(m){m.classList.remove('active');}

    document.getElementById('addGroupBtn').addEventListener('click',()=>openModal(addGroupModal));
    document.querySelectorAll('.close-btn').forEach(b=>b.addEventListener('click',e=>closeModal(e.target.closest('.modal'))));

    document.getElementById('addGroupForm').addEventListener('submit', async e => {
      e.preventDefault();
      const name = document.getElementById('newGroupName').value.trim();
      const success = await addGroup(name);
      if (success) {
        e.target.reset();
        closeModal(addGroupModal);
      }
    });

    document.getElementById('scoreForm').addEventListener('submit', async e => {
      e.preventDefault();
      const name = document.getElementById('groupName').value;
      const existingData = groups[name]?.data || {};
      const data = {
        ...existingData,
        capitaineUsed: document.querySelector('input[name="capitaineUsed"]:checked').value === 'true',
        voyanteCards: +document.getElementById('voyanteCards').value,
        reflexionEarly: document.querySelector('input[name="reflexionEarly"]:checked').value === 'true',
        treasureTime: +document.getElementById('treasureTime').value,
        ritualErrors: +document.getElementById('ritualErrors').value,
        voleurCorrected: document.querySelector('input[name="voleurCorrected"]:checked').value === 'true'
      };
      await updateGroupScore(name, data);
      closeModal(scoreModal);
    });

    document.getElementById('confirmDeleteBtn').addEventListener('click', async () => {
      if (window.groupToDelete) {
        await deleteGroup(window.groupToDelete);
        window.groupToDelete = null;
      }
      closeModal(confirmDeleteModal);
    });

    document.querySelectorAll('.choice-buttons button').forEach(button => {
      button.addEventListener('click', (e) => {
        const parent = e.target.parentElement;
        const timeInput = document.getElementById('treasureTime');
        const voyanteInput = document.getElementById('voyanteCards');
        const ritualInput = document.getElementById('ritualErrors');

        parent.querySelectorAll('button').forEach(b => b.classList.remove('active'));
        e.target.classList.add('active');

        if (parent.id === 'time-buttons') timeInput.value = e.target.dataset.time;
        if (parent.id === 'voyante-buttons') voyanteInput.value = e.target.dataset.voyante;
        if (parent.id === 'ritual-buttons') ritualInput.value = e.target.dataset.ritual;
      });
    });

    document.getElementById('loadFromGitHubBtn').addEventListener('click', loadFromGitHub);
    document.getElementById('saveToGitHubBtn').addEventListener('click', async (e) => {
      const btn = e.target;
      btn.disabled = true;
      const originalText = btn.innerHTML;
      btn.innerHTML = `📤 Sauvegarde...`;
      isSaving = true;
      try {
        await saveToGitHub(groups);
        btn.innerHTML = `✅ Fait!`;
      } catch (err) {
        btn.innerHTML = `❌ Erreur`;
        alert(`Échec de la sauvegarde: ${err.message}`);
      } finally {
        isSaving = false;
        setTimeout(() => {
          btn.disabled = false;
          btn.innerHTML = originalText;
        }, 2000);
      }
    });

    const updateChannel = new BroadcastChannel('scores_update');
    updateChannel.onmessage = (event) => {
      if (event.data === 'refresh') {
        console.log('🔄 Mise à jour reçue, chargement des données...');
        loadFromGitHub();
      }
    };
  </script>
</body>
</html>